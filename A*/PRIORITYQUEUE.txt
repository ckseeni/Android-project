public void solve() {
        puzzleBoard.previousBoard=null;
        ArrayList<PuzzleBoard> solution = new ArrayList<>();
        PuzzleBoard temp;
        Comparator<PuzzleBoard> PuzzleBoardComparator = new Comparator<PuzzleBoard>() {
            @Override
            public int compare(PuzzleBoard lhs, PuzzleBoard rhs) {
                if(lhs.priority()<rhs.priority()){
                    return -1;
                }
                else if(lhs.priority()>rhs.priority()){
                    return 1;
                }
                return 0;
            }
        };


        PriorityQueue<PuzzleBoard> puzzleBoardPriorityQueue = new PriorityQueue<>(10,PuzzleBoardComparator);

        puzzleBoardPriorityQueue.add(puzzleBoard);

        while (!puzzleBoardPriorityQueue.isEmpty()){

            temp = puzzleBoardPriorityQueue.remove();

            if(temp.resolved()){

                while(temp!=null) {

                    solution.add(temp);
                    temp = temp.previousBoard;
                }

                break;
            }

            else{
                ArrayList<PuzzleBoard> neighbours=temp.neighbours();
                for(PuzzleBoard t:neighbours) {
                    puzzleBoardPriorityQueue.add(t);
                }

            }
        }
        Collections.reverse(solution);
        this.animation=solution;
        this.draw(new Canvas());



    }


}
